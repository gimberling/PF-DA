Шаг 1.
-- Узнаем, когда была первая транзакция для каждого студента. Начиная с этой даты, мы будем собирать его баланс уроков. 
with first_payments as 
    (
        select  
            user_id, 
            date_trunc('day', min(transaction_datetime)) first_payment_date
                
        from    
            SKYENG_DB.payments
        
        where   
            status_name = 'success'
        
        group by user_id 
    ),
    
    
-- Шаг 2.
-- Соберем таблицу с датами за каждый календарный день 2016 года.
all_dates as 
    (
        select  
            distinct date_trunc('day', class_start_datetime) dt
        
        from    
            skyeng_db.classes
        
        where   
            class_start_datetime between '2015-12-31' 
            and '2017-01-01'
            
        order by dt
    ),
    
    
-- Шаг 3.
-- Узнаем, за какие даты имеет смысл собирать баланс для каждого студента.
all_dates_by_user as 
    (
        select  
            p.user_id, 
            d.dt
                
        from    
            first_payments p
        
        join    
            all_dates d
            on dt >= first_payment_date
            
        order by 
            user_id, 
            dt
    ),
    
    
-- Шаг 4.
-- Найдем все изменения балансов, связанные с успешными транзакциями.

payments_by_dates as 
    (
        select  
            user_id, 
            date_trunc('day',transaction_datetime) payment_date, 
            sum(classes) as transaction_balance_change
                
        from    
            SKYENG_DB.payments
        
        where   
            status_name = 'success'
        
        group by 
            user_id, 
            payment_date
                
        order by user_id
    ) ,


-- Шаг 5.
-- Найдем баланс студентов, который сформирован только транзакциями.
payments_by_dates_cumsum as 
    (
        select  
            a.user_id, 
            a.dt,
            coalesce(b.transaction_balance_change, 0) as transaction_balance_change,
            sum(coalesce(b.transaction_balance_change,0)) over (partition by a.user_id order by a.dt) as transaction_balance_change_cs
                
        from    
            all_dates_by_user a
        
        left join 
            payments_by_dates b 
            on (a.user_id=b.user_id and a.dt=b.payment_date)
            
        order by a.user_id
    ),    

 -- Шаг 6.
 -- Найдем изменения балансов из-за прохождения уроков.
classes_by_dates as 
    (
        select 
            date_trunc('day', class_start_datetime) class_date, 
            user_id, 
            count (id_class)*-1 as classes
            
        from 
            skyeng_db.classes
            
        where 
            class_status in ('success', 'failed_by_student') and class_type != 'trial'
            
        group by 
            user_id, 
            class_date
    ),


 -- Шаг 7.
 -- По аналогии с уже проделанным шагом для оплат создадим CTE для хранения кумулятивной суммы количества пройденных уроков.
classes_by_dates_dates_cumsum as 
    (
        select 
            a.user_id, 
            a.dt, 
            coalesce(b.classes,0) as classes,
            sum(coalesce(b.classes,0)) over (partition by a.user_id order by a.dt) as classes_cs
            
        from 
            all_dates_by_user a
            
        left join 
            classes_by_dates b 
            on (a.user_id=b.user_id and a.dt=b.class_date)
            
    ),
    

-- Шаг 8.    
-- Создадим CTE balances с вычисленными балансами каждого студента.
balances as 
    (
        select 
            a.user_id, 
            a.dt, 
            a.transaction_balance_change, 
            a.transaction_balance_change_cs, 
            b.classes, 
            b.classes_cs,
            classes_cs + transaction_balance_change_cs as balance
            
        from 
            payments_by_dates_cumsum a
            
        join 
            classes_by_dates_dates_cumsum b 
            using (user_id, dt)
    )

-- Шаг 9.
-- Изменение общего количества уроков на балансе студентов. 
select 
    dt, 
    sum(transaction_balance_change) as sum_transaction_balance_change,
    sum(transaction_balance_change_cs) as sum_transaction_balance_change_cs,
    sum(classes) as sum_classes,
    sum(classes_cs) as sum_classes_cs,
    sum(balance) as sum_balance
    
from balances

group by dt
order by dt
